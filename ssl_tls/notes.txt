
openssl:
tous les nouveaux algo ne st pas dedans.
pour installer la version 3.2.0 (depuis le 23 Novembre), ça s'instale comme ça
DES plus bon --> nouveau standard AES ajd.
3DES: si k1, k2 et k3 sont égaux --> la taille de clé est 56, si c'est que k1, k2 qui st égaux --> 112 bits de taille de clé, 168 k1, k2 et k3 st différents --> taille de clé 168
Mais pour DES ET 3DES, les blocs st de taille 64 bits.
rq: pour l'AES la taille des blocs devraient être de 128 bits, les clés st de taille 128, 192 et 256
Serpent ET Twofish utilisent la même taille de clés et de blocs que pr AES

Chiffrement de fichier en natif on peut utiliser du flux par exemple ( c quoi ?)

exo1:
cmd: openssl enc -e -aes-128-ecb -in 01_plain -out 01_cipher
on voit que le fichier contenant le chiffré a 32 octets alors que le claire a 10 octets ---> y'a du padding à cause des blocs.
Faire un hexdump pour voir:
hexdump -C 01_cipher --> pour voir ce qui s'est apssé dans 01_cipher
observation:
00000000  53 61 6c 74 65 64 5f 5f  cb cd 81 bc 60 58 3b 6c  |Salted__....`X;l|
00000010  93 ae 8d ce df 2c e5 52  eb 59 10 c4 8e e5 9b af  |.....,.R.Y......|
00000020
Salted = seed 
on voit un nouveau bloc de padding rajouté vide.
--> faire un chiffrement du claire enciore pour voir vers un 01_cipher_bis en chiffrant avec exactement le même mdp (et la même entrée):
openssl enc -e -aes-128-ecb -in 01_plain -out 01_cipher_bis
diff -q 01_{cipher,cipher_bis}
--> On obtient que les fichiers sont différents 

en rajoutant un -p après:
openssl enc -e -aes-128-ecb -in 01_plain -out 01_cipher -p
on voit la clé et le salt généré
Rq:
- on retrouve le salt après le 8 premier octets.
- On a 2 clés diff avec 2 fois le meme msg et le meme mdp

Dans openssl y'a une f° de dérivation de mdp pour le mode ECB
rq: mdp secret et le salt est publique
rq: il dit que la f° de dérivation de clé utilisé est deprecated et qu'il faut utiliser pbkdf2 car c'est plus adapté.
	--> Car si on a un fpga juste pour bruteforcer est possible alros qure pbkdf2 est trop compliqué à casser avec du hard.

commande: openssl enc -e -aes-128-ecb -in 01_plain -out 01_cipher -p -pbkdf2

Sans sel: openssl enc -e -aes-128-ecb -in 01_plain -out 02_cipher -p -nosalt (-p = affiche moi ce qui se passe)
rq: cette fois la taille du fichier chiffré est de 16 et plus de 32 octets. 
Si on veut tester si c'est déterministe: openssl enc -e -aes-128-ecb -in 01_plain -out 02_cipher_bis -p -nosalt
Et on voit qu'on a exactement la même clé (et donc la même iv)

CBC (y'a du padding):
création un fichier de 0 où on va chiffrer 15 octets:
- dd if=/dev/zero of=03_plain bs=15 count=1
- openssl enc -e -aes-128-cbc -in 03_plain -out 03_cipher -p -nosalt
On a 15 octets en sortie alors que y'a 15 octets d'entrée

rq: si je met 16 octets d'entrée --> en faisant la même chose qu'au dessus on obtient une sortie d'un chiffré d'une taille de 32 octets (tjrs du padding)
Par défaut, openssl (ne sait pas si on est dacc avec la personne en face pour que y'ait du padding) rajoute du padding.
--> Et dc pour un bloc de 16 rempli sans besoin de padding, il rajoute unnoucveau  bloc de 16 bits uniquement de padding et donc il chiffre le 1er bloc et et le 2ème --> Le ciffrée est la concat du 1er bloc et le 2eme (qui est chiffré à partir uniquement de d'un bloc de padding)

Comment es généré le padding ? 
openssl retire le denier bloc de padding (et s'arrête au début du bloc de padding à sa connaissance).
--> Voir slide sur le padding des chiffrement par bloc symmétrique (ISO 10126 met du random au lieu de 0 pr le padding) et pkcs7 (écrit sur chaque octet ds le padding la taille des octets qu'il rajoute).

remarque:
- Donc pour chaque chiffrement il nous sort un sel puis il mouline et nous sort une clé différente.
- il semble qu'openssl utilise la norme par défaut de PKCS#7
- il existe une option -nopad (si on ajoute ça lors du déchiffrement, ça ne retire pas le padding généré par le chiffrement).

F° de hashage et code d'authent:
3 propriétés:
	- preimage (pas capable de remonter à l'entrée depuis un y donnée)
	- 2nd preimage (pas capable de trouver un x' tq x' != x et h(x') = h(x))
	- Collision (pas capable de trouver un (x,x') tq x'!=x et h(x')=h(x))
	
Utilisation de s f° de hash pour les codes d'authent:
Def°: code d'authent assure l'authent du msg: le msg a pas été modif au cours d'une om° ou pendant le stockage.
principes:
	- f° de hashage à clé (HMAC). Rq: HMAC = on fait une étape, puis l'autre. 
	- Chiffrment par bloc (CBC-MAC, GCM). Rq: GCM est capable de faire du chiffrement.
	
Voir slide ==> f° de hashage et code d'authent
Rq: Blake, Skein et Keccak (Kechak) sont les 3 finaliste de Sha3.
rq: HMAC (pour assurer le code d'authent: HMAC-SHA1, HMAC-SHA256) => on peut voir sur wikipédia les schémassont bien fait.
rq: CRC32 CE N'EST PAS UNE FONCTION DE HASHAGE DE 32 BITS.
rq: hmac )= f° de hash avec une clé (donc on va voir une clé à un moment). --> les clés c'est 0x36 ou 0x5c ( y'a donc 2 masques)
Dans le monde symmétrique on signe le pas les données on assure l'intégrité avec code d'authent.

Exo: utilisation des f° de hashage avec openssl:
voir: openssl dgst -help

exo:
	- echo -n "mssis_2324" > 01_message
	- openssl dgst -hex 01_message
	output: SHA256(01_message)= 77620c3e065db1db2505245c054d7aa2a9c582a2877221c80e9090b9fe3e405d --> par défaut c'est sha256
rq: 
	- pour faire du sha1: openssl dgst -hex -sha1 01_message
	- Pour avoir le binaure on peut ajouter -binary dans la commande puis faire une hexdump -C 01_dgst:
		openssl dgst -binary -sha1 < 01_message > 01_dgst
		hexdump -C 01_dgst
avec openssl on est capable de générer le hmac (= f° de hashage avec 1 clé):
--> openssl dgst -sha1 -hmac DEADFACE 01_message : (DEADFACE est une clé je crois),puis on a le hmac
--> hmac permet de vérifier l'authenticité du msg.

Aléa cryptographique:
On l'utilise pour générer les clés crypto et aussi les iv (et aussi pour les salts) --> les sortie doivent être imprévisible:
utilisa° classique: openssl rand -h
On veut que si on a la même machine, meme hard, tout pareil --> on veut un aléa complètement différents. On veut une bonne source d'entropie.
y'a un aléa qui marche un peu mieux que les autres, 

Rq: cloudflare (un projet de eux) avaient un mur immeunse de pleins de lampes (lampes en forme de fusées avec de la cire) et les mouvements sont imprévisibles --> avec une webcam on regarde ces mouvements et on applique un chiffre à ces mouvements et voila.

openssl rand 32 --> 32 octets d'aléa
on peut faire une redirection: openssl rand 32 > random (pour la redirection vers un fichier de sortie sur linux).
on peut aussi faire: openssl rand -hex 32, openssl rand -base64 32 (ça peut être utilisé pour un mdp pas cher)

Utilisation avancée d'openssl (rajouter une source physique pour l'aléa):
	--> dd if=/dev/random of seed.raw bs=512 count=1
	--> openssl rand -rand seed.raw -hex 32
	rq: seed.rawne doit etre utilisé qu'une fois (une maj est nécessaire pour réutiliser)

ASYMÉTRIQUE avec openssl:
rappel:
	- couple (clé pub, clé priv): seul la clé privée doit rester secrète.
	
les problèmes mathématiques: "on ne fait plus des opérations logique comme du symmétrique mais mathématiques)
	--> Factorisation: RSA,
	--> logarithme discret: DSA, Diffie-Hellman (pour l'échange de clé), ElGamal (fait du chiffrement), Courbes Elliptiques
L'anssi dit qu'on fait du RSA 2048 bis, alors qu'en courbe elliptique on peut faire du 256 --> division par 8 de la taille.

> RSA
****Génération de bi-clés: openssl genrsa -h*****
--> génération d'1 bi-clé RSA de 1024 bits(1024 = taille du modulo ds la formule du RSA) : openssl genrsa 1024
--> jouer avec les bi-clés:
	openssl genrsa 1024 > rsa_priv.pem
	cat rsa_priv.pem (pour afficher la bi-clé)
	openssl rsa -noout -text -in rsa_priv.pem  (rsa pour inspecter une clé, -noout pour pas réafficher le fichier .pem)
	--> en sortie: le private exponent c'est notre d (clé privée) dans l'algo rsa

Protection de la clé privée:
	openssl genrsa -aes128 1024 > rsa_priv.pem (permet donc de chiffrer cette clé) --> enf aisant un cat on voit que y'a marqué encrypted dans la délimitation
	si on fait ça: openssl rsa -noout -text -in rsa_priv.pem --> On nous demande un mdp et il le fait car y'a marqué 'ENCRYPTED' en en-tête de la clé.
	openssl rsa -aes128 -in rsa_priv.pem > rsa_priv.pem (ou sans aes) --> ça demande un mdp si il a été protégé. En gros, cette commande retire la protection.
	
rq: décrypter = casser sans la clé mais pas déchiffré
rq: https://chiffrer.info/ --> pour comprendre les éléments de langage.
rq: site magique: cyberchef (y'a une version offline)
	
	clé priv/pub:
	openssl rsa -in rsa_priv_2.pem -pubout > rsa_pub.pem (ok pour ici car priv2 est déprotégé)
	openssl rsa -noout -text -pubin -in rsa_pub.pem (en mode rsa, openssl s'attend à une clé privée donc on fait un -pubin)

RSA Signature: la sig identifie celui qui signe car il est le seul à avoir la clé privée et le dest vérifie avec notre clé publique
exemple1 (en partant du principe qu'on a déjà une clé privée non protégée et une clé publique extraite de cette clé): 
	echo -n "mssis_2324" > message.txt
	openssl dgst -sign rsa_priv.pem message.txt > message.sign (on sign avec l'option -sign et avec sa clé privée, puis on dit ce qu'on signe)
	openssl dgst -verify rsa_pub.pem -signature message.sign message.txt (nous dit si la signature du msg est bien ok, mais si on a changé le msg entre temps ça dit erreur car ça 		regarde message.sign qui a été signé avant la modif du message.txt).

exemple2:
	dd if=/dev/zero of=message2.txt bs=1M count=1
	openssl dgst -sign rsa_priv.pem message2.txt > message2.sign
	openssl dgst -verify rsa_pub.pem -signature message2.sign message2.txt (et ça marche mais comprendre pourquoi)
--> En pratique on élève pas direct à la puissance d (dans m^d[n] = Sn --> c'est le hashé du msg qu'on élève à la puissance d)
--> donc c'est pas le msg que je signe c'est l'empreinte du msg ! qu'on signe et par défaut le hash utilisé par défaut est sha256 (comme qd on fait un dgst sans préciser l'algo)


RSA Chiffrement:
Rappel: 
	- On Chiffre avec la clé publique du destinataire
	- le destinataire déchiffre avec sa clé privée

Exemple1 (openssl est capable de chiffre un msg en shell):
	echo -n "mssis_2324" > message.txt
	openssl rsautl -encrypt -inkey rsa_pub.pem -pubin -in message.txt -out message.enc (pour chiffrer) OU alors pkeyutl au lieu de rsautl pour pas qu'il rale
	openssl rsautl -decrypt -inkey rsa_priv.pem -in message.enc -out message_decrypted.txt (pour déchiffrer) OU alors pkeyutl au lieu de rsautl pour pas qu'il rale

Exemple2: pour chiffrer un gros msg
	dd if=/dev/zero of=message2.txt bs=1M count=1
	openssl pkeyutl -encrypt -inkey rsa_pub.pem -pubin -in message2.txt -out message2.enc (pour chiffrer) OU alors pkeyutl au lieu de rsautl pour pas qu'il rale
--> On obtient cette erreur: 'Public Key operation error
803B5DCFE57F0000:error:0200006E:rsa routines:ossl_rsa_padding_add_PKCS1_type_2_ex:data too large for key size:crypto/rsa/rsa_pk1.c:129:' car la clé est trop petite pour la taille du message.
possibilité Sol°: plutôt faire un hash du msg et on chiffre le hashé puisque le msg est trop grand --> openssl ne fais pas le hash par défaut comme pour la signature (mais pparement c'est pas bon)
possibilité Sol°: faire du cbc pour chiffrer chaque bloc car chaque bloc est beaucoup plus petit qu'un message en entier. --> mais pas bien car le gigaByte on ne pourra pas l'atteindre ça va être beaucoup trop long pour un gros gros message(AVOIR une bonne idée du chiffrement cbc en tant que schéma).
possibilité autre sol°: faire un genrsa bcp plus grand ?? est-ce une solution ? non si c'est trop grand car openssl dit que openssl ne peux généréer qu'au max une clé de 16384.
	--> Si on fait un 'openssl genrsa 16384' ça tourne très longtemps et donc c'est le truc le + user-friendly donc go trouver une autre solution.

vrai solution = chiffrement HYBRIDE (solution pour l'exemple 2):
	1) On génère une clé symmétrique K (clé secrète symmétrique --> on l'a transmet à personne sauf au destinataire voulu).
	2) chiffrement du msg avec un algo symétrique avec la clé K
	3) on chiffre en asymétrique la clé K (on chiffre la clé symmétrique k avec du rsa) ==> On séquestre la clé K
	4) on transmet les 2 msg chiffrés.
		==> On appelle ça du "séquestre de clé" ou en anglais du "wrapping de clé"
rq: généralement on fait un ptit coup de diffi-hellman pour s'échanger les clés.
rq: dans le monde asymétrique on parle de signature et donc on oublie tout ce qui est nitégrité avec el hmac

--> Conclusion: tout se passe bien mais toujours des attaques possible donc on fait du padding piour pallier à ça.
Pour faire du padding on peut par exemple utiliser du PKCS1 version 1.5 (PKCS#1 v1.5) --> UTILISÉ pour le chiffrement et la signature.
rq: en chiffrement PKCS 1 v1.5 a des faiblesses.
rq: le PKCS1 v1.5 a été amélioré CAR y'avait quand meme des faiblesses pour le chiffrement:
	--> PKCS# 1 v2.1 
		- Encryption: OAEP
		- Signature: PSS
	
rq: DSA c'est pour faire de la signature. 
rq: en entreprise --> plutôt faire du python que des lignes de comamnde à rallong openssl.

Infrastructure gestion des clés:
CERTIFICATS: lien entre identité et clé publique et ce lien c'est en fait juste une signature.
=> L'idée est créer sa propre autorité de certification ou just son certificat à l'aide de ce site qui font vraiment les choses bien: https://github.com/OpenVPN/easy-rsa/tree/master

Attention: ne pas générer son autorité de certification avec openssl

outil pour bien utiliser et faire le tp:
<pycryptodome>

Fonction de dérivation de mdp (on va voir comment le coder):
Comment embêter l'attaquant le + possible en + d'avoir un mdp assez long et en + d'un sel ?
Réponse: il faudrait avoir un argument qui dit combien de tour de dérivation on faisait.

ChaCha20: très bien, c'est un algo à mode de chiffrement par flow.
Type de f° de dérivation de mdp:
	Argon2d
	Argon2id (dépend du processeur pour empêcher le //. A étudier pour choisir l'un ou l'autre)
	--> Fais en sorte d'avoir une fonction qui permet de ne pas avantager un attaquant mieux équipé que nous avec notre CPU (avec un FPGA par ex)

Rq: dans /etc/shadow le '$' est un caractère de séparation. généralement le 1er élém donne la fonction de dérivation du mdp --> voir dans la norme de /etc/shadow
rq: yescript est un sccript comme argon qui fonctionne très bien.

exo: faire une fonction def derive_pwd(pad, salt, iter).
	--> pour dériver notre mdp on prend (pwd|salt) --> on met dans une boite pour sortir le hash sauf qu'à partir de ce hash on recommence l'itération N fois.
	Rq: une fonction deriv_i est une fonction qui prendra en paramètre (pwd, salt, deriv_i-1). 
	Peut-être voir comment implémenter une fonction de hashage pour éviter de pouvoir remonter à l'étape d'avant.
	
Qd on dérive un mdp avec itération on a un Km (une clé maître)
MAIS on a aussi besoin d'une clé pour l'intégrité (pour le HMAC) en + de la clé maître dérivée du mdp (par notre fonction derviv_password)

DEPUIS Km on peut générer Kc (clé de chiffrement) et Ki(clé d'intégrité) (en faisant des hash) mais on ne doit pas être capable de remonter à Km depuis Ki ni Kc ET on ne doit pas retrouver Kc depuis Ki et inversement..

- Kc = f° de hashage qui prend Km en entrée --> Kc = H(Km || 0x00)
- Ki = f° de hashage qui prend Km en entrée --> Ki = H(Km || 0x01).
Rq: On rajoute un 0x01 pour éviter de pouvoir retrouver les autres éléments depuis Ki ou Kc
Rq: le Km nous donne une clé de chiffrement et d'intégrité donc pas besoin de stocker la clé maître qlq part pendant tout ce qui est génération (mais typiquement on peut le mettre dans /etc/shadow)

On veut donc rajouter une fonction qui permettra de générer une clé Kc (de chiffrement) et Ki(clé d'intégrité pour un HMAC par exemple).
Voici la signature de al fonction pour l'exercice:
def deriv_master_key(km: bytes).. ok c'est codé
Une fois qu'on a toutes ces clés im faut que je puisse chiffrer et assurer l'intégrité
ex: on choisi
	- AES-256-CBC pour le chiffrement. 
		On détermine les entrées, on a un IV(aléa), Kc et un input.
	- HMAC-SHA-256 pour l'intégrité
		On détermine les entrées, on a Ki comme clé en entrée et un input entrée arbitrairement par le user.
	Q° normale à se poser (est-ce-que on utilise le même input pour les 2).
	Attention: ON EST DANS LE MONDE SYMM2TRIQUE --> Dc on se met dacc avec qlq sur un mdp pour protéger le fichier qu'on partage en publique. La personne avec qui on s'est mis dacc, sera la seule personne à avoir le mdp et donc le seul à pouvoir vérifier l'intégrité par exemple.
	En symmétrique on dit Encrypt(1) then MAC(2) PUIS Verify (1) then Decrypt (2) --> Comme ça on peut vérifier l'intégrité du chiffrer et si c pas bon bah y'a pas besoin de perdre du temps à le déchiffrer derrière et de perdre du stockage pour rien. De +, comme on fait un peu moins confiance au HMAC pour l'intégrité, si jamais un attaquant arrive  à remonter depuis le hash de sortie du HMAC jusqu'à l'entrée du HMAC --> Alors il vaut mieux avoir pris pour entrée le chiffré plutôt que le mot de passe en claire.
Quelqu'un qui a chiffré dans ce cas, va stocker: salt||IV||C||H 
Rq : En pratique, dans le HMAC on va mettre en entrée C, salt, IV car si jamais j'ai une erreur sur l'IV par ex lorsque je veux déchiffrer (bah avant ej verifie) mais si c'est vérifié et que je peux pas déchiffrer bah c'est pas bon. Donc tout ce qu'on a besoin de stocker est envoyé dans le HMAC pour vérifier tous leur intégrité.

Exo: faire un programme qui resecte cette ligne de commande en prenant en compte ce qui a été dit au dessus: python3 protect_symetric.py <password> <input_file> <output_file>
IV à 8 bits (mais c'ets l'IV de l'aes). IV est à 8 ou 18 octets ? alors qu'un bloc dans l'AES c'est 128 bits, le salt est à 64 bits(8 octets) APRES avoir dérivé le mdp

Faire projet!
rq: vie de tous les jours: on chiffre puis on fait de l'intégrité (hmac par ex en symmétrique) mais il existe des f° qui font les deux en meme temps comme le mode GCM!
rq: Le github veorq/cryptocoding est bien --> y'a des recommendations/bonnes pratiques pour coder de la crypto (comme par exemple comparer en temps constant des strings)

outil intéressant: outil qui s'appelle z3 --> le prof nous montre le code source dans un fichier keygenme.c
SINON, y'a une autre app pour s'entrainer à z3 avec le code de luhn.

rq: faire du bypass d'AD assez facile pour nos payloads  il y a 2 algo créer par la NSA:
	--> The Simon and Speck Families of Block Cipher (généralement pas torp reconnu par les moteurs d'antivirus)
Pour bypasser certains trucs pdt des pentests --> meterpreter est très souvent détecté et  
